Choosing the Right Data Structure
ðŸ“Œ If you need fast lookups, use a dictionary. 
ðŸ“Œ If you need ordered and changeable data, use a list. 
ðŸ“Œ If data should never change, use a tuple. 
ðŸ“Œ If uniqueness is important, use a set. 

1. List ([]) â€“ Ordered & Mutable
Use When: You need a collection of items that can change, and order matters.

ðŸ”¹ Example: Storing a To-Do List

python
tasks = ["Buy groceries", "Finish report", "Call mom"]
tasks.append("Book flight")  # Add new task
tasks.remove("Finish report")  # Remove completed task
print(tasks)
âœ… Best for: Dynamic lists, queues, and ordered data.

2. Tuple (()) â€“ Ordered & Immutable
Use When: You need a collection that should never change.

ðŸ”¹ Example: Storing GPS Coordinates

python
location = (12.9716, 77.5946)  # Latitude, Longitude
print(location[0])  # Access latitude
âœ… Best for: Fixed data like coordinates, days of the week, or configuration settings.

3. Set ({}) â€“ Unordered & Unique
Use When: You need unique items and donâ€™t care about order.

ðŸ”¹ Example: Storing Unique Email Subscribers

python
subscribers = {"alice@example.com", "bob@example.com"}
subscribers.add("charlie@example.com")  # Add new subscriber
print(subscribers)  # No duplicates allowed!
âœ… Best for: Removing duplicates, fast membership checks.

4. Dictionary ({key: value}) â€“ Key-Value Mapping
Use When: You need fast lookups with named keys.

ðŸ”¹ Example: Customer Database

python
customer = {"name": "Alice", "age": 30, "email": "alice@example.com"}
print(customer["email"])  # Quick access by key
âœ… Best for: Storing structured data like user profiles, inventories, or API responses.
